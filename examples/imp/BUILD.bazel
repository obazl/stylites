load("//:RULES.bzl", "tree_sitter_genparser")

GOPT_VERSION = "10.0.0"
LIBLOGC_VERSION = "1.0.0"
LINENOISE_VERSION = "1.0.0"

DEPS = ["@gopt//src:gopt",
        "@liblogc//src:logc",
        "@unity//src:unity",
        "//src/runtime:tree-sitter",
        ":imp"]
COPTS = ["-Iexternal/gopt~10.0.0/src",
         "-Iexternal/unity~2.5.2/src",
         "-Isrc/runtime"]
LINKOPTS = []
DEFINES = []
TOOLCHAINS = []
TIMEOUT = "short"
TAGS = []

cc_test(
    name          = "imp_test",
    srcs          = ["imp_test.c"],
    deps          = DEPS,
    copts         = COPTS,
    linkopts      = LINKOPTS,
    local_defines = DEFINES,
    # toolchains    = TOOLCHAINS,
    timeout       = TIMEOUT,
    tags          = TAGS
)

#FIXME: use a custom rule with default tree-sitter dep?
# e.g. tree-sitter-parser( ... )
cc_library(
    name = "imp",
    srcs = [":imp_parser.c"],
    deps = ["//src/runtime:tree-sitter"],
    copts = ["-Ilib/include/tree_sitter"]
)

tree_sitter_genparser(
    name = "parser",
    grammar = "grammar.js",
    out = "imp_parser.c",
    rust_bindings = True,
    node_bindings = True
)

################################################################
cc_binary(
    name  = "repl",
    # srcs  = select({
    #     "//config/repl:archive?": ["repl_static.c"],
    #     "//conditions:default":  ["repl_dynamic.c"]
    # })
    srcs = ["imp_repl.c"] + select({
        "//conditions:default": []
    }),
    deps = DEPS + ["@linenoise//src:linenoise"],
    copts = select({
        "@platforms//os:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-Iexternal/gopt~{}/src".format(GOPT_VERSION),
        "-Iexternal/liblogc~{}/src".format(LIBLOGC_VERSION),
        "-Iexternal/linenoise~{}/src".format(LINENOISE_VERSION),
    ],
    data = [
        # ":repl.scm",
        # "//scm:srcs",
        # "//scm/srfi:srcs",
        # "//scm/s7:srcs",
    ],
    linkopts = LINKOPTS + select({
        # "@platforms//os:bsd": ["-Wl,-export-dynamic"],
        # "@platforms//os:macos": [],
        "@platforms//os:linux": [
            # "-ldl",
            # "-Wl,-export-dynamic" # same as -rdynamic?
            # if math_s7 included add -lm
        ],
        # "//:linux_clang": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    visibility = ["//visibility:public"]
)
